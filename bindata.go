// Code generated by go-bindata.
// sources:
// prom-templates/deployment.yaml
// prom-templates/route.yaml
// prom-templates/service.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4b\x6f\x13\x31\x10\xbe\xef\xaf\x18\x0a\x57\xe7\x51\xc4\xa1\xbe\x55\x2a\x12\x87\x06\xa2\x8a\xf6\x8a\x26\xce\x24\x31\xf1\x8b\xf1\x78\x9b\xd0\xf6\xbf\xa3\x6d\x92\x8d\x43\x7b\x02\xd5\xa7\xf5\x7c\x8f\x19\x7d\xe3\xc5\x64\xef\x88\xb3\x8d\x41\x03\x6d\x84\x42\xf7\x99\x87\xed\x78\x46\x82\xe3\x66\x6d\xc3\x5c\xc3\x15\x25\x17\xb7\x9e\x82\x34\x9e\x04\xe7\x28\xa8\x1b\x80\x80\x9e\x34\x24\x8e\x7e\x7f\xc9\x09\xcd\xbe\xa2\x84\xb2\x34\x39\x91\xe9\x98\x4c\xc9\x59\x83\x59\xc3\xb8\x01\x10\xf2\xc9\xa1\x50\x87\x00\xd4\x8e\xdd\x39\x71\xed\x8e\xc3\x19\xb9\x7c\x80\x01\x30\xa5\x0a\x3f\xb4\xe8\x8e\x89\x41\xd0\x06\xe2\x9e\xad\xf6\x76\xc6\xaa\x05\x89\x59\x11\xf7\x36\xd6\xe3\x92\x34\x30\x2d\x6d\x16\xde\x0e\x16\x34\x8f\x8c\x89\xe3\x4f\x32\x32\x88\xbc\x1c\xee\x2a\xfa\xe3\xa8\xd7\x98\xe8\x3d\x86\xf9\x71\x16\x05\xc3\x99\x0d\xc3\x19\xe6\x55\x55\x53\xa6\xba\x3c\xf6\xdf\x00\xef\xdf\xbd\xa4\x03\x64\x12\x50\xb4\x29\x11\x92\x4d\xb4\x40\xeb\x2a\xd0\x14\x76\xa0\xae\xe1\xc3\xc3\xf4\xe6\xdb\xe4\xfb\xe5\xcd\x13\x3c\x82\x20\xc3\xa6\xfd\x5d\xd1\xd2\xda\x3a\x07\xea\xcb\xed\x74\x37\x51\x97\x0f\xc9\x8a\x4a\xee\x49\x14\x5a\x5d\x29\x0e\xd1\xec\x6d\x2b\x04\xa0\x45\x57\x48\xc3\xd9\x1e\xfb\x71\x77\x79\x7d\xfb\xf9\xac\xa7\xdc\x47\x5e\xdb\xb0\xbc\xb2\xac\xa1\xea\x34\xec\x09\x6d\x74\xc5\xd3\x24\x96\x20\xb9\x0e\xeb\xb8\xdb\x9d\x42\x65\x89\x8c\x4b\x52\x3b\x41\x35\x83\xef\xb4\x53\x94\xd5\xab\x1d\x5e\x3a\xfd\xbd\xd6\x0e\xa9\x84\xba\x3d\x1f\x8c\xcf\x07\xc7\x4d\xa6\xc8\xaf\x8d\x76\x4f\xb3\x62\xeb\xf4\x0f\x2f\x6a\x1a\x59\x34\x5c\x8c\x2e\x8e\x16\x4c\x39\x16\x36\x94\xeb\x54\x99\x7e\x15\xca\x72\x52\x03\x30\xa9\x68\xf8\x34\x1a\xf9\x93\xaa\x27\x1f\x79\xfb\x0c\x4c\x2a\xc0\x59\x6f\xff\xc3\xe0\xad\xb3\xcf\x2b\x64\x9a\x72\x34\x94\xf3\xd7\xe3\x4f\x2f\x5c\x0e\x1e\x3b\xc3\x7f\x6c\x4e\x3e\xc9\xf6\xf9\x65\x3d\x3c\x35\x7f\x02\x00\x00\xff\xff\x0e\xb6\xe3\xfa\x9e\x04\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1570191402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesRouteYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4e\x03\x31\x0c\x44\xef\xf9\x0a\xff\x00\x65\x7b\x6c\xee\x5c\x51\x55\x10\x77\x2b\x19\xb6\x16\x9b\x38\x72\xdc\x56\xfc\x3d\xca\xee\x22\xc4\xc5\xd2\xcc\x1b\x8f\xfd\x25\x35\x47\xba\xe8\xcd\x11\xb8\xc9\x07\xac\x8b\xd6\x48\x36\x9c\x83\x36\xd4\x7e\x95\x4f\x3f\x88\x3e\xdf\x8f\xa1\xc0\x39\xb3\x73\x0c\x44\x95\x0b\x22\x35\xd3\xb2\x8b\xde\x38\xed\xce\x93\xa3\x7b\xe8\x0d\x69\x24\x5d\xc7\x24\xda\x6e\xbd\xc1\xee\x92\xb0\x3a\xff\x3a\x88\x1e\x90\xf9\xea\x91\x8e\xd3\x14\x88\x9a\x9a\x6f\x8b\xce\x36\xc3\xcf\x43\xd3\x69\x3a\x0d\xe8\x4b\xdf\x19\xac\x48\x65\x5f\xbf\x46\x9e\xb7\x62\xa9\x1d\xe9\x66\x78\xc9\x33\xde\xff\x12\x67\x5d\x24\x7d\x47\xba\x20\x8b\x21\x79\x20\x7a\xc8\x92\x13\x5b\xfe\x45\xaf\x5a\x11\x7e\x02\x00\x00\xff\xff\xfc\xa8\x43\x2e\x16\x01\x00\x00")

func promTemplatesRouteYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesRouteYaml,
		"prom-templates/route.yaml",
	)
}

func promTemplatesRouteYaml() (*asset, error) {
	bytes, err := promTemplatesRouteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/route.yaml", size: 278, mode: os.FileMode(420), modTime: time.Unix(1570184236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570191862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml": promTemplatesDeploymentYaml,
	"prom-templates/route.yaml": promTemplatesRouteYaml,
	"prom-templates/service.yaml": promTemplatesServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml": &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"route.yaml": &bintree{promTemplatesRouteYaml, map[string]*bintree{}},
		"service.yaml": &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

