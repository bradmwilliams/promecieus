// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// prom-templates/deployment.yaml
// prom-templates/kustomization.yaml
// prom-templates/service.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xbd\x72\xdb\x4c\x0c\xec\xf5\x14\x28\xbe\x96\x12\x65\xcf\x57\xf8\xba\x4c\x3c\x49\x8a\x28\xd1\x38\x9a\xf4\xd0\x11\x12\x2f\xe6\xfd\x04\xc0\xc9\x56\x6c\xbf\x7b\x86\x96\x45\x1e\x13\xa7\x49\x11\x56\xe4\x2e\x76\x01\xec\x1d\x31\xb9\xaf\xc4\xe2\x62\x30\x40\xf7\x4a\xa1\x7f\x95\xc5\x61\xb9\x25\xc5\xe5\xec\xd6\x85\xc6\xc0\x35\xa5\x2e\x1e\x3d\x05\x9d\x79\x52\x6c\x50\xd1\xcc\x00\x02\x7a\x32\x90\x38\xfa\x99\x24\xb2\x3d\xc4\x94\x3a\x67\x51\x0c\x2c\x67\x00\x4a\x3e\x75\xa8\xd4\x33\x00\xa5\xb4\x7f\x0a\xf9\x09\xe8\x70\x4b\x9d\x9c\x69\x00\x4c\xa9\xe0\xcf\x2d\xfa\xc7\x05\xa7\x6f\x63\x50\x74\x81\x78\x50\x54\x2f\x96\xd6\x55\x3b\x52\xdb\x12\x0f\x56\xce\xe3\x9e\x0c\x30\xed\x9d\x28\x1f\xe7\x3b\x6a\x22\x63\xe2\xf8\x8d\xac\xce\x23\xef\x17\x27\xc4\x5c\xd6\x83\xc6\x46\xef\x31\x34\xe3\x3c\x15\x2c\xb6\x2e\x2c\xb6\x28\x6d\x81\x55\xb6\xf8\x78\x1c\xde\x01\x84\x14\xaa\x7c\x1f\x21\xb9\x44\x3b\x74\x5d\xc1\x65\x8f\x72\x0b\x75\x5d\xd7\x05\x68\x33\x77\x50\xc9\x47\xf8\xef\x61\x7d\xf3\x79\xb5\x79\x73\xf3\x04\x8f\xa0\xc8\x70\x7f\xf8\x01\x95\x1f\x4a\xef\x22\xdf\xba\xb0\xbf\x76\x6c\x60\xd1\x07\x44\xda\x52\x96\xc5\x50\x40\xe1\xf0\x8e\xa3\x37\x85\x79\x05\x36\x86\x9d\xdb\xaf\x30\xdd\xd0\xae\x64\xa6\x67\xa1\x38\xa6\x76\x88\x5d\xf6\xb4\x8a\x39\xa8\x94\x31\x8c\xd5\xa7\xc6\x95\x68\x64\xdc\x53\x75\x12\x14\xde\xbe\xd7\xae\x51\xdb\x57\x07\xb5\x7f\x3c\xc2\xb1\xf6\xd7\x23\xec\x99\xc2\xca\x1c\x2e\xe6\xcb\x8b\xf9\x18\x63\x8a\xfc\xda\xb0\x77\xb4\xcd\xae\xcc\xfa\xdc\x7a\x1d\x59\x0d\x5c\xd5\x57\xa3\x05\x13\x36\x2e\x90\xc8\x9a\xe3\x96\xca\xa8\x5a\xd5\xf4\x9e\x74\x9a\x5e\x3a\xad\x37\xc5\x7e\x77\x7d\xbe\x12\xb6\xa5\x7e\x9a\x0f\x9b\xcd\xba\x20\xd4\x79\x8a\x59\xbf\x90\x8d\xa1\x79\xf9\x77\x06\x27\x62\x17\x9b\x91\x2a\x0d\x25\x5b\x4b\x22\x9b\x96\x49\xda\xd8\x35\x53\x65\x7f\xe5\x32\x53\xc1\x5e\x16\x2b\x4a\xcc\x6c\x49\xca\x55\x98\xbe\x67\x12\x95\xe9\x7a\x36\xe5\xbe\x6d\xed\x27\xa8\x27\x1f\xf9\x68\xe0\xff\xba\x5e\xb9\x7f\x76\x61\xa4\x45\xa6\x35\xc7\x7e\xeb\x4f\xe8\x49\x12\x5a\x32\xa0\x9c\xcf\x1e\x27\xc3\xbf\x6c\x4e\x3e\xe9\xf1\xf9\xaf\x7a\x78\x9a\xfd\x0c\x00\x00\xff\xff\x09\x8e\x35\x7c\x1a\x05\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1306, mode: os.FileMode(420), modTime: time.Unix(1570209403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x41\xca\xc2\x30\x10\x46\xf7\x39\xc5\x5c\xa0\xff\x01\x02\xff\xa2\x4a\x71\x93\xd8\x52\xd4\x6d\x19\xe3\x54\x02\x49\x26\x4c\xa2\xd8\xdb\x8b\xb5\x1b\x57\x1f\xbc\x8f\xf7\x1c\xc7\xc8\xc9\xe0\x95\x42\xd1\x0a\x00\x73\xd6\xb0\xef\xad\xed\x8f\x93\x69\x77\x9d\x51\x09\x23\x0d\x42\xb3\x7f\xfd\x1e\x8d\x12\x2a\xfc\x10\x47\xab\xd8\xc0\x8d\x72\xe0\x25\x52\xaa\x7f\x0b\xc6\xb0\xb2\x42\xf2\xf4\x8e\xbe\xc0\x71\x9a\xfd\xdd\x62\x3e\x50\x22\xc1\xca\xa2\x55\x03\x9f\xbe\x86\x2c\x1c\x2b\x8a\x02\x08\xbe\x92\x60\xd8\xa2\xc3\xd8\xdb\x53\x3b\xfe\x6f\x3b\x5d\x5a\x73\xee\xd4\x3b\x00\x00\xff\xff\x25\xde\x37\x9b\xb6\x00\x00\x00")

func promTemplatesKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesKustomizationYaml,
		"prom-templates/kustomization.yaml",
	)
}

func promTemplatesKustomizationYaml() (*asset, error) {
	bytes, err := promTemplatesKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/kustomization.yaml", size: 182, mode: os.FileMode(420), modTime: time.Unix(1570201268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570192162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml":    promTemplatesDeploymentYaml,
	"prom-templates/kustomization.yaml": promTemplatesKustomizationYaml,
	"prom-templates/service.yaml":       promTemplatesServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml":    &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"kustomization.yaml": &bintree{promTemplatesKustomizationYaml, map[string]*bintree{}},
		"service.yaml":       &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
