// Code generated by go-bindata.
// sources:
// prom-templates/deployment.yaml
// prom-templates/route.yaml
// prom-templates/service.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x5d\x4f\x1b\x3b\x10\x7d\xcf\xaf\x98\x9b\x8b\xc4\xbd\x95\xbc\x9b\x80\xfa\x80\xa5\x56\x42\xa2\x52\x1f\xa0\x8d\x50\xe1\x15\x4d\x9c\xd9\x5d\x17\x7f\x75\xec\x5d\x48\x09\xff\xbd\x5a\x42\xb2\x0e\x84\x97\x56\xf5\x93\x33\xe7\xcc\x99\xc9\xd9\x63\x0c\xfa\x9a\x38\x6a\xef\x24\xd0\x7d\x22\xd7\x5f\x63\xd9\x4d\xe7\x94\x70\x3a\xba\xd5\x6e\x21\xe1\x8c\x82\xf1\x4b\x4b\x2e\x8d\x2c\x25\x5c\x60\x42\x39\x02\x70\x68\x49\x42\x60\x6f\x47\x31\x90\xea\x4b\x4c\xc1\x68\x85\x51\xc2\x74\x04\x90\xc8\x06\x83\x89\x7a\x04\x20\x6f\xed\x4f\xd6\xbe\x2e\x18\x9c\x93\x89\x1b\x18\x00\x43\xc8\xf0\xcd\x88\xfe\x28\xef\x12\x6a\x47\xbc\x65\x8b\x67\x39\xa5\x45\x45\x49\x35\xc4\x5b\x19\x6d\xb1\x26\x09\x4c\xb5\x8e\x89\x97\x45\x45\x0b\xcf\x18\xd8\x7f\x27\x95\x0a\xcf\x75\xb9\xae\xc8\xe3\xc9\xb6\x47\x79\x6b\xd1\x2d\x86\x5d\x04\x94\x73\xed\xca\x39\xc6\x26\xab\x09\x95\xfd\x58\x6d\xef\x00\xff\xfe\xf3\x9a\x0e\x10\x29\x81\xa0\xfb\xd6\x43\xd0\x81\x2a\xd4\x26\x03\x1f\xb2\x3b\x00\xa9\xc6\xc3\xb8\x36\x7e\x8e\x46\x8e\xf7\x40\x00\xd4\xa1\x69\x31\x69\xef\x6e\xb4\x4b\xc4\x1d\x1a\x09\xc7\x93\xb8\x9f\x1d\x15\x63\xa0\xb7\x99\x8f\xf0\xf1\xc9\x6b\x4a\x0d\xb5\xb1\x58\xda\x7c\x37\xd5\xb2\x01\x11\xcf\xe1\xe0\x61\x76\xf9\xf5\xe2\xdb\xe9\xe5\x23\xac\x20\x21\xc3\x7d\xf7\x13\x84\x70\x5e\xf8\x8e\xf8\x8e\x75\x22\xb1\xd0\x0c\xab\x15\x24\x6e\x29\x93\xb8\xd5\xc6\x80\xf8\x7c\x35\x83\x83\xff\xaa\x9a\x29\xc0\x78\x18\x37\x86\x32\xb0\x57\xe5\xbb\xb2\x37\x1e\x84\x81\x15\xa8\x36\x81\x58\xc0\x61\x79\x08\xa2\x82\xe3\xff\x73\x1f\x0d\x51\x00\xed\x2a\xed\x74\x5a\x6e\x01\x72\x9d\xcc\x58\x9b\x48\x3c\x6f\xbc\xe3\x4a\x6f\x1d\x49\x18\x3f\x63\x37\xd7\xa7\xe7\x57\x9f\x06\x3b\xee\x3c\xdf\x6a\x57\x9f\x69\x96\x50\xf6\x99\x2d\xb7\x50\xe7\x4d\x6b\xe9\xc2\xb7\x2e\xc5\x3c\x1e\x43\x9a\xd7\x7f\x49\xc4\xe4\x19\x6b\x12\xeb\x86\x6c\xba\xed\x7b\x67\x98\x9a\x17\xda\xaf\x35\x5e\x46\xb8\x47\xca\x01\x96\xdd\x51\x31\x3d\x2a\x86\xd4\x22\xd7\x71\xd7\x01\xb1\x59\xa3\x48\x71\x31\x2f\x02\xa6\xe6\x43\xb9\x67\xc0\x9a\xab\xbc\xab\x74\x5d\x54\xda\x50\xce\x2a\xdf\xc8\x45\xf0\xbc\xcf\x83\x3b\x9a\xb7\x3a\x0f\xcf\xe6\xb1\xce\x3c\x27\x09\x27\x93\x93\x61\x63\xa6\xe8\x5b\x56\xb4\xb3\x36\xd3\x8f\x96\x62\xda\xa9\x01\xa8\xd0\x4a\x78\x3f\x99\xd8\x9d\xaa\x25\xeb\x79\xf9\x04\x5c\x64\x80\xd1\x56\xff\x81\xc0\xdf\xfb\xc8\xb1\x41\xa6\x19\x7b\x45\x31\x7e\x41\x4b\x31\xa0\x22\x99\x3f\x96\xb5\xd4\x6f\x8e\x25\x1b\xd2\xf2\x29\xb6\x0f\x8f\xa3\x5f\x01\x00\x00\xff\xff\xfa\x44\xba\x11\xdc\x05\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1500, mode: os.FileMode(420), modTime: time.Unix(1570195465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesRouteYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x4e\x03\x31\x0c\x44\xef\xf9\x0a\x7f\x41\xd9\x1e\x9b\x3b\x57\x54\x15\xc4\xdd\x4a\x86\xd4\x62\x13\x47\x8e\xdb\x8a\xbf\x47\xd9\x05\xc1\x25\xd2\xbc\x37\x19\xf9\x53\x5a\x8e\x74\xd1\x9b\x23\x70\x97\x77\xd8\x10\x6d\x91\x6c\x92\x83\x76\xb4\x71\x95\x0f\x3f\x88\x3e\xdd\x8f\xa1\xc2\x39\xb3\x73\x0c\x44\x8d\x2b\x22\x75\xd3\x1a\x46\x47\x9a\xc8\x75\xbe\x44\xfb\xe8\x2b\xec\x2e\x09\x1b\xf9\x57\x9e\xf1\x01\x29\x57\x8f\x74\x5c\x96\x40\xd4\xd5\x7c\xff\xe8\x6c\x05\x7e\x9e\x99\x4e\xcb\x69\x4a\x5f\xc7\x8f\x83\x55\x69\xec\xdb\x79\xc8\x65\x1f\x96\x36\x90\x6e\x86\xe7\x5c\xf0\xf6\xd7\x38\xeb\x2a\xe9\x2b\xd2\x05\x59\x0c\xc9\x03\xd1\x43\xd6\x9c\xd8\xf2\xaf\x7a\xd1\x86\xf0\x1d\x00\x00\xff\xff\x84\xf0\x9a\x83\xff\x00\x00\x00")

func promTemplatesRouteYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesRouteYaml,
		"prom-templates/route.yaml",
	)
}

func promTemplatesRouteYaml() (*asset, error) {
	bytes, err := promTemplatesRouteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/route.yaml", size: 255, mode: os.FileMode(420), modTime: time.Unix(1570192158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570192162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml": promTemplatesDeploymentYaml,
	"prom-templates/route.yaml": promTemplatesRouteYaml,
	"prom-templates/service.yaml": promTemplatesServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml": &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"route.yaml": &bintree{promTemplatesRouteYaml, map[string]*bintree{}},
		"service.yaml": &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

