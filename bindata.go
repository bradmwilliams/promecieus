// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// prom-templates/deployment.yaml
// prom-templates/kustomization.yaml
// prom-templates/service.yaml
// html/app.jsx
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xbd\x72\xdb\x4c\x0c\xec\xf5\x14\x28\xbe\x96\x12\x65\xcf\x57\xf8\xba\x4c\x3c\x49\x8a\x28\xd1\x38\x9a\xf4\xd0\x11\x12\x2f\xe6\xfd\x04\xc0\xc9\x56\x6c\xbf\x7b\x86\x96\x45\x1e\x13\xa7\x49\x11\x56\xe4\x2e\x76\x01\xec\x1d\x31\xb9\xaf\xc4\xe2\x62\x30\x40\xf7\x4a\xa1\x7f\x95\xc5\x61\xb9\x25\xc5\xe5\xec\xd6\x85\xc6\xc0\x35\xa5\x2e\x1e\x3d\x05\x9d\x79\x52\x6c\x50\xd1\xcc\x00\x02\x7a\x32\x90\x38\xfa\x99\x24\xb2\x3d\xc4\x94\x3a\x67\x51\x0c\x2c\x67\x00\x4a\x3e\x75\xa8\xd4\x33\x00\xa5\xb4\x7f\x0a\xf9\x09\xe8\x70\x4b\x9d\x9c\x69\x00\x4c\xa9\xe0\xcf\x2d\xfa\xc7\x05\xa7\x6f\x63\x50\x74\x81\x78\x50\x54\x2f\x96\xd6\x55\x3b\x52\xdb\x12\x0f\x56\xce\xe3\x9e\x0c\x30\xed\x9d\x28\x1f\xe7\x3b\x6a\x22\x63\xe2\xf8\x8d\xac\xce\x23\xef\x17\x27\xc4\x5c\xd6\x83\xc6\x46\xef\x31\x34\xe3\x3c\x15\x2c\xb6\x2e\x2c\xb6\x28\x6d\x81\x55\xb6\xf8\x78\x1c\xde\x01\x84\x14\xaa\x7c\x1f\x21\xb9\x44\x3b\x74\x5d\xc1\x65\x8f\x72\x0b\x75\x5d\xd7\x05\x68\x33\x77\x50\xc9\x47\xf8\xef\x61\x7d\xf3\x79\xb5\x79\x73\xf3\x04\x8f\xa0\xc8\x70\x7f\xf8\x01\x95\x1f\x4a\xef\x22\xdf\xba\xb0\xbf\x76\x6c\x60\xd1\x07\x44\xda\x52\x96\xc5\x50\x40\xe1\xf0\x8e\xa3\x37\x85\x79\x05\x36\x86\x9d\xdb\xaf\x30\xdd\xd0\xae\x64\xa6\x67\xa1\x38\xa6\x76\x88\x5d\xf6\xb4\x8a\x39\xa8\x94\x31\x8c\xd5\xa7\xc6\x95\x68\x64\xdc\x53\x75\x12\x14\xde\xbe\xd7\xae\x51\xdb\x57\x07\xb5\x7f\x3c\xc2\xb1\xf6\xd7\x23\xec\x99\xc2\xca\x1c\x2e\xe6\xcb\x8b\xf9\x18\x63\x8a\xfc\xda\xb0\x77\xb4\xcd\xae\xcc\xfa\xdc\x7a\x1d\x59\x0d\x5c\xd5\x57\xa3\x05\x13\x36\x2e\x90\xc8\x9a\xe3\x96\xca\xa8\x5a\xd5\xf4\x9e\x74\x9a\x5e\x3a\xad\x37\xc5\x7e\x77\x7d\xbe\x12\xb6\xa5\x7e\x9a\x0f\x9b\xcd\xba\x20\xd4\x79\x8a\x59\xbf\x90\x8d\xa1\x79\xf9\x77\x06\x27\x62\x17\x9b\x91\x2a\x0d\x25\x5b\x4b\x22\x9b\x96\x49\xda\xd8\x35\x53\x65\x7f\xe5\x32\x53\xc1\x5e\x16\x2b\x4a\xcc\x6c\x49\xca\x55\x98\xbe\x67\x12\x95\xe9\x7a\x36\xe5\xbe\x6d\xed\x27\xa8\x27\x1f\xf9\x68\xe0\xff\xba\x5e\xb9\x7f\x76\x61\xa4\x45\xa6\x35\xc7\x7e\xeb\x4f\xe8\x49\x12\x5a\x32\xa0\x9c\xcf\x1e\x27\xc3\xbf\x6c\x4e\x3e\xe9\xf1\xf9\xaf\x7a\x78\x9a\xfd\x0c\x00\x00\xff\xff\x09\x8e\x35\x7c\x1a\x05\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1306, mode: os.FileMode(420), modTime: time.Unix(1570209403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x41\xca\xc2\x30\x10\x46\xf7\x39\xc5\x5c\xa0\xff\x01\x02\xff\xa2\x4a\x71\x93\xd8\x52\xd4\x6d\x19\xe3\x54\x02\x49\x26\x4c\xa2\xd8\xdb\x8b\xb5\x1b\x57\x1f\xbc\x8f\xf7\x1c\xc7\xc8\xc9\xe0\x95\x42\xd1\x0a\x00\x73\xd6\xb0\xef\xad\xed\x8f\x93\x69\x77\x9d\x51\x09\x23\x0d\x42\xb3\x7f\xfd\x1e\x8d\x12\x2a\xfc\x10\x47\xab\xd8\xc0\x8d\x72\xe0\x25\x52\xaa\x7f\x0b\xc6\xb0\xb2\x42\xf2\xf4\x8e\xbe\xc0\x71\x9a\xfd\xdd\x62\x3e\x50\x22\xc1\xca\xa2\x55\x03\x9f\xbe\x86\x2c\x1c\x2b\x8a\x02\x08\xbe\x92\x60\xd8\xa2\xc3\xd8\xdb\x53\x3b\xfe\x6f\x3b\x5d\x5a\x73\xee\xd4\x3b\x00\x00\xff\xff\x25\xde\x37\x9b\xb6\x00\x00\x00")

func promTemplatesKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesKustomizationYaml,
		"prom-templates/kustomization.yaml",
	)
}

func promTemplatesKustomizationYaml() (*asset, error) {
	bytes, err := promTemplatesKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/kustomization.yaml", size: 182, mode: os.FileMode(420), modTime: time.Unix(1570201268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570192162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlAppJsx = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x98\x0a\x05\x2c\x63\x73\x72\xb6\x87\xbe\xd8\x56\x1e\x36\xdb\x3d\x6c\x71\xb9\x5b\x6c\x5a\xdc\x43\x71\xe8\x31\xd4\x38\x22\x42\x93\x06\x49\x45\xb7\x35\xfc\xdd\x0b\xfe\x91\x44\x4a\x8a\xb3\x8b\x16\x38\xbf\x18\x9a\x7f\x9c\xf9\xcd\x70\x66\x24\xca\x89\xd6\x70\x8f\x44\xd1\xfa\x1d\x51\x80\xbf\x1b\x14\x95\x86\xcf\x48\xa8\x29\x6e\xe5\xe1\x28\x05\x0a\x03\xa7\x05\x00\x95\x42\x1b\xd5\x50\x23\x55\x7e\x54\xf2\xa8\x57\x8e\x0c\xa0\x9b\x23\x76\xa4\xed\xc2\x91\x4c\xcd\x74\x51\x13\x51\x71\xfc\x28\x8e\x8d\xb9\xad\x89\x78\x44\x28\x5f\x60\x14\x0f\x4c\x54\xb9\xe5\xad\xb6\x63\xfd\xfb\xe6\xe1\xc0\x4c\xaa\xea\x69\x23\xad\xb3\x3d\x7a\x62\x3a\xc7\x67\x14\xa6\x73\xd5\xd9\x70\x9e\x16\x52\xf8\xb0\x9d\xac\x97\x2a\x0c\x51\x8f\x68\x8a\x67\xc2\x1b\x1c\xdb\xf4\x67\xbe\x6a\x2e\x11\xeb\x4d\x28\x14\x15\xaa\xbc\xd3\x53\x68\x1a\x25\x20\x77\x0f\x00\x3b\x07\xf7\x3b\x29\x8d\x36\x8a\x1c\x8b\x0f\x52\x1d\xa0\x96\x8a\xfd\x47\x0a\x43\xf8\x4d\x10\x9b\x17\xfc\x41\xc9\xe6\x38\x88\x4c\x85\x6e\x25\x07\x7d\x28\x4f\x6f\xdf\x9e\x63\xb1\x79\x6b\xb7\x52\x18\x25\x79\x22\x07\x40\x1a\x23\x3f\x48\xda\xe8\x32\x33\xaa\xc1\x6c\xc4\x36\x5f\x8e\x58\x66\x06\x7f\x37\x63\xce\x91\x13\x8a\xb5\xe4\x15\xaa\x32\xfb\x80\x58\xc1\x01\xe1\x93\x92\x2d\xfc\xf3\xf3\x8f\xba\x28\x8a\xb1\x82\x83\xbe\x3c\x45\xc0\xea\x21\x4b\xe7\x91\xb0\x14\x3e\xc7\x41\x7e\x92\xfb\x54\x7e\x9d\x80\xb4\x9e\xa2\xf4\x55\x20\xbe\x82\xe1\xbb\xc6\x18\x29\x66\xf1\xd1\xae\x32\xc6\x01\x4b\x71\xcb\x19\x7d\x4a\x42\xf0\x35\x34\x3a\x09\xe0\x07\x14\xa8\x88\xc1\xd4\x81\x71\x20\xde\x83\xaf\x8f\x75\xc2\x9d\x14\xd5\xac\x84\x67\x86\x0a\x3f\x2f\x16\xbe\x93\x7c\xe2\x84\x89\x3b\xd4\x9a\x3c\xe2\xc5\x66\xf2\xca\x85\xa8\xd8\x33\x38\x8b\x3f\x91\x43\x5a\x0e\x84\xa3\x32\xb7\x96\x75\x06\x25\x39\x96\x99\xa3\x64\x43\x40\xb1\xf4\xc1\xbb\x72\xee\x23\xa9\xd8\x73\xf0\x3c\x75\x3c\xf8\xfc\x0b\x33\xf5\x8f\x4c\x3c\xfd\x51\xbe\xef\x08\xd4\x0a\xf7\xe5\x5c\x0c\x37\x73\xc4\xdd\x9a\xdc\x7c\x6d\x70\xdf\x12\xd4\x33\x51\xc0\xb4\x83\xa2\x84\x3d\xe1\x1a\xb7\x3d\x3d\x9c\x0d\x25\x88\x86\xf3\x81\x3e\x84\x07\x25\x2c\x97\x9e\xa1\x5b\x66\x68\x0d\x79\x0c\x03\x35\x4c\x8a\xee\x24\x00\x4a\x34\xc2\x52\x1b\x62\x1a\xbd\xdc\xf4\x58\xa4\xe6\xdc\xd3\x77\x4c\xec\xe5\xb2\x97\x78\x50\x48\x9e\xb6\x89\x95\x3d\x61\xbc\x51\xf8\x8a\x99\xca\x76\x07\x75\xd1\x10\x67\xe2\x29\xb2\xd2\x63\x61\xfb\xdf\xf6\xa2\x71\xdd\x50\x8a\x5a\xcf\x5a\xf7\x85\x98\x68\xf9\x1a\x80\x0c\xde\x44\x74\x2f\xcd\xf6\x90\xfb\x83\x07\xb0\x42\xb5\xed\xc6\x05\x3b\xe8\x96\xa7\xb8\xce\x42\xb2\x66\x2b\x2a\x74\xc4\x33\x20\xd7\x38\x39\x21\xb9\xcb\xff\x8b\xf9\xb4\x18\xef\x5d\x9e\xbf\xa5\x16\x2d\x0c\x53\xf3\xba\xe0\x28\x1e\x4d\x0d\x65\x09\xd7\x13\x7c\xf2\xe1\x4a\xe9\x23\x11\x37\xbb\xb5\xfb\x0b\xd4\xb0\x65\xcc\x06\x1e\x69\xf6\xf7\x29\x34\x96\xa4\xf1\xce\x79\x74\x20\xc7\x9c\x19\x3c\x40\x39\xee\xdd\xbb\x1e\x48\x57\xfc\xe5\xc9\x8a\x85\x9b\x10\xa1\xe8\xa8\x1d\x7e\xe9\xc4\xf2\xb7\xba\xfb\x9d\xa3\xfe\x1d\xb9\xb9\xda\xce\x42\xee\x46\xa8\xdb\x2a\xfe\x0f\x0b\x5e\x1f\xbc\xbd\xb1\xb6\x0b\x74\xb8\x44\x93\x7a\x03\xcb\xe5\x55\x20\x77\xe8\x6c\xe0\x5f\xbf\x76\xb4\x56\x6f\x5c\xf3\xf0\xde\x4e\x97\xc6\x68\x35\x1b\x6d\x7e\x03\xe3\xe2\xd2\x18\xed\x62\x73\x06\x66\x17\xc8\x60\x81\x54\xd5\x5d\xdf\xe1\x46\x94\x97\x57\xce\x78\x99\x8c\x80\x48\x36\x45\x8d\xc6\x56\x3f\xe6\xa7\x04\xaa\x78\xc3\x99\x37\x3b\xb7\x7b\xfa\x8d\xf5\xa8\xdc\xff\x7b\xdc\x93\x86\x9b\x7c\xb5\x4d\x6f\x8c\x4b\x51\xbc\x42\x5d\xba\x34\x5d\xed\x78\x87\xd5\x97\x9e\x1d\x99\x6a\x6d\x14\xa2\xca\xff\x7e\xff\xf3\x4f\x85\x36\x8a\x89\x47\xb6\xff\x92\x0f\x57\x63\xe9\x6b\x7a\xb9\x81\xa5\xc0\xb6\x2f\x02\x80\x65\xa8\x83\xe5\x06\xe6\x5d\x0b\x92\xe7\xd5\x2a\x5c\x4e\x4a\xdc\xe4\x40\xa5\xa4\x8a\xa6\x85\x14\x5a\x72\x2c\xb8\x7c\x0c\xac\xa8\xe4\x17\x00\x43\xb2\xf2\x70\xe2\x7c\x0e\x42\xf5\xde\x40\x7e\x8a\x4b\xb4\x28\x82\x67\x1d\xed\xaa\xe3\xfe\x1a\x5c\x73\xa7\xd0\xee\xe6\xbc\x67\xd5\x9d\x6c\x84\x49\x26\x27\x97\x14\x4a\x68\x99\xa8\x64\x5b\x70\x49\x89\x85\xe4\x0a\x04\xb6\xff\x6e\x14\x1b\x26\x66\xab\x87\x67\x9b\x33\x2e\xa9\x6d\x29\x46\x52\xc9\xa1\x2c\x4b\xc8\x6a\x63\x8e\x7a\x93\xad\xa2\xe6\xe3\x95\xec\xe4\x68\xb5\xde\x64\xb3\xad\x2c\x95\xea\x85\x16\x11\xe7\x4d\x09\xd9\x7a\x6d\xc7\x8e\x3d\xb5\x96\xda\x6c\x27\xec\x56\xaf\xfd\x58\xce\x62\x9f\xed\xe0\xc7\x16\x7e\xc1\x87\x7b\x49\x9f\xd0\xe4\x5e\x25\xd4\x1e\x47\x03\xa6\x26\xdd\xb5\x1b\x14\xa9\x14\x02\xa9\xf9\x28\x0c\xaa\x67\xc2\xc3\xa5\x5f\xaf\xa1\xc5\x07\xed\x0c\x81\x14\xf2\x88\xc2\x97\x36\x70\xa6\x8d\xdd\x78\x83\x57\x45\x60\x96\x90\xaf\x6c\xda\xe6\xea\x21\x1b\x4c\x85\xd3\xb0\xca\xba\x77\xd2\xc9\x25\x74\x5d\xa8\xd5\x70\x8e\x25\x88\x29\x0c\x3b\xa0\x74\x8d\xe7\x2f\x7f\xbd\xde\x5a\x0f\x15\x6a\x1b\x15\x3b\xa0\x02\x23\x2d\x19\xa4\x00\xe7\x8e\xdc\xc3\xe4\x50\xd6\xbf\x01\x50\x8e\x44\xfd\xc3\xdb\xcb\x47\x00\xac\x9c\x69\x27\x01\x1d\xcd\x99\xfd\x0a\xcb\xe7\x79\xf4\x28\x97\x1a\x5f\x84\xcf\x73\x4b\xc0\x97\xe0\xeb\x8b\xe7\x37\x9f\x58\x60\x1a\x9c\x52\x55\xc0\x67\x0c\x2e\x40\xcb\x38\x87\x07\x04\x62\x0c\x1e\x8e\x06\x2b\x60\x02\xfe\x7c\xba\x23\xa6\x2e\x0e\x2c\x9a\x9f\xf6\xf7\xf6\xfa\xfa\xfa\x1a\xd6\xee\xff\x2a\xe1\xe4\x09\xd6\x6f\x12\xe8\x57\x41\xa3\x57\x58\x9d\x41\x5b\x07\xaa\xe2\xb7\xc1\x0a\x16\x0a\x89\xee\xb1\x7e\x31\x8b\x17\x0e\xb2\x29\x60\x82\x2a\x3c\x58\xc8\x14\xda\xae\xc7\x42\x2e\x06\x80\xe2\xac\x41\x09\x1a\x4d\x97\x52\x57\x51\xb4\x46\xfa\x74\x05\x3d\x00\x2e\xe6\xab\x34\x20\x97\x6c\x4a\x38\x07\x27\x0d\xfb\x46\xb8\x6c\x02\xd9\x1b\x5b\x54\x5e\xec\x52\x6e\x5d\xaf\x7b\x31\xb7\x9e\x5b\x02\x2a\x35\x97\x5d\xc7\x1e\x32\x93\x85\xfc\xa2\xa0\xb6\x77\xa1\xc2\x0a\x9c\xc8\x06\xb2\x08\x5f\xa5\xba\x2e\x38\x10\xb3\x5b\x2e\x35\x13\x8f\xe0\x1d\xcb\x26\xe0\xb7\xba\x70\x35\xd3\xcd\xa2\x2e\x1c\xe7\xe6\xf0\xea\x80\xcf\xe6\xa5\x32\xc4\x67\x53\x54\xc4\x90\xd5\x36\x62\x9a\xe8\xb5\xc3\x0d\x9f\x23\x51\x1a\xa7\xb2\xa3\x81\xdd\xcf\x80\x74\x48\x8c\x36\x4c\xdb\xb3\xba\x7e\x3f\x74\x31\x3f\x9b\x92\x7d\x3c\x9e\xaa\x9d\x02\xfc\xc9\xbf\x08\xc5\x3d\xba\xe7\x95\xb0\x0b\x0b\x6f\x47\x0a\xab\x72\x6a\x23\xd9\xf5\xa2\x73\xc3\x3b\xd6\x7c\x8b\x8f\x0e\xe9\x85\xa6\xfa\x4b\xff\xf8\x1d\x45\x9b\xe8\x65\x34\x08\x5e\x79\x71\x8d\xcc\x44\x9f\x22\x76\xf5\xf7\x37\x9f\x94\x3c\xe0\xed\x47\x6c\xf4\x6e\x5d\x7f\x1f\xf1\xfa\x0f\x89\xd1\x4d\x8f\x26\x7c\x12\xfa\x0b\xdf\x75\x92\xcf\x72\xe9\x57\x91\xcb\x0a\x7e\x47\x9a\xd1\x08\x5f\x53\x7a\x95\x08\xe9\xdd\x83\x8a\x1f\x4f\x7d\x3a\x66\x5e\xa9\xfb\x2f\x1d\x6e\x75\x7e\xff\xf3\x5d\x11\x8a\x68\xd1\x07\xee\x36\xec\xf5\x8d\xbd\x2c\x95\xa4\x8d\xed\x29\xc5\x23\x9a\xbf\x71\xd7\x5e\xde\x7d\xf9\x58\xe5\x4b\x2a\x85\x21\x4c\xa0\x5a\xae\x16\xab\xed\xe2\xbf\x01\x00\x00\xff\xff\x46\x7b\xee\x12\x81\x15\x00\x00")

func htmlAppJsxBytes() ([]byte, error) {
	return bindataRead(
		_htmlAppJsx,
		"html/app.jsx",
	)
}

func htmlAppJsx() (*asset, error) {
	bytes, err := htmlAppJsxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/app.jsx", size: 5505, mode: os.FileMode(420), modTime: time.Unix(1570266922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x3f\x6f\xdb\x3e\x10\xdd\xf3\x29\xf8\x23\x10\xe0\xd7\x41\xa4\x1a\xc7\xad\xa1\x50\x5e\xd2\x0e\x9d\x9a\xa1\x4b\x46\x8a\x3c\x95\x54\x29\x51\xe0\x9d\x1d\x19\x45\xbf\x7b\x61\x53\xb6\x6b\xb7\xa3\x27\xf1\xde\x01\xef\x0f\xf4\x4e\xfd\xf7\xe9\xeb\xf3\xb7\xd7\x97\xcf\xcc\x51\x1f\xd6\x77\x2a\x7f\x18\x53\x0e\xb4\xdd\x3f\x18\x53\x3d\x90\x66\xc6\xe9\x84\x40\x35\xdf\x50\x5b\xac\xf8\xfa\x2e\xef\xc8\x53\x80\xf5\x4b\x8a\x3d\x3c\x7f\x81\x0d\x2a\x99\x91\x79\x8d\x26\xf9\x91\x18\x26\x53\x73\x47\x34\x62\x25\xa5\xb1\x43\x87\xc2\x84\xb8\xb1\x6d\xd0\x09\x84\x89\xbd\xd4\x9d\x9e\x64\xf0\x0d\xca\x04\xda\x90\x7c\xbf\x14\x8f\xe2\x21\x0f\xa2\xf7\x83\xe8\x90\xaf\x95\xcc\x7c\xeb\x1b\x92\x17\x36\xf6\x37\x14\x68\x74\x03\xa1\x30\x31\x81\x5c\x8a\x95\x78\x78\x94\x4d\x8a\x6f\x08\xe9\xd6\x21\x8a\x26\x46\x42\x4a\x7a\x94\xa5\x58\x94\x62\x75\x0d\xff\x43\x30\x2b\x06\x3f\xfc\x60\x09\x42\xcd\x91\x76\x01\xd0\x01\x10\x67\x2e\x41\x7b\x76\xd0\xeb\xc9\xd8\x41\x9c\xc8\xf6\xc3\xde\xc4\x59\x74\x21\x16\xe2\xa3\x34\x88\xf2\x52\xd1\x20\x9e\xca\x71\xe0\xcf\x39\x19\x13\x46\x27\xcb\x7e\xce\x13\x63\x6f\xde\x92\xab\xd8\xb2\xbc\x7f\x3a\x61\xb1\xe9\xc0\x50\xd1\x7a\xaa\x98\x89\x03\x69\x3f\x9c\x97\x0e\xfc\x77\x47\x15\x5b\x94\xe5\x38\x1d\xe1\x5f\x47\x76\x04\x9d\x8c\x2b\x0c\x0c\x04\xe9\x0f\x99\x31\xa2\x27\x1f\x87\x6a\x1f\x59\x93\xdf\xc2\x99\x91\xe2\x78\x65\x80\x92\x1e\xb0\x8d\xa9\xaf\xf2\x33\x68\x82\xd7\xff\x8b\x65\x79\xff\xee\xe9\xda\xf9\x87\xbf\x7d\x28\x79\x8a\xac\xe4\xf1\x82\x54\x13\xed\x6e\xfe\xdb\xd6\x6f\x99\xb7\x35\x9f\xc3\x41\xe2\xcc\x04\x8d\x78\x81\x1c\x38\x6a\x7e\xcc\xbb\x3c\xe8\xf0\x99\x41\x5a\xbf\xbd\xac\x0e\xed\x46\xa8\x39\xc1\x44\xb9\x7d\x3c\x97\x49\x8f\xa3\xe8\x70\xba\x2c\x9c\x92\xd9\x8c\x92\xf9\xd0\x7f\x07\x00\x00\xff\xff\x00\x64\xcf\xe1\x00\x04\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 1024, mode: os.FileMode(420), modTime: time.Unix(1570266095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml":    promTemplatesDeploymentYaml,
	"prom-templates/kustomization.yaml": promTemplatesKustomizationYaml,
	"prom-templates/service.yaml":       promTemplatesServiceYaml,
	"html/app.jsx":                      htmlAppJsx,
	"html/index.html":                   htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"app.jsx":    &bintree{htmlAppJsx, map[string]*bintree{}},
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml":    &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"kustomization.yaml": &bintree{promTemplatesKustomizationYaml, map[string]*bintree{}},
		"service.yaml":       &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
