// Code generated by go-bindata.
// sources:
// prom-templates/deployment.yaml
// prom-templates/route.yaml
// prom-templates/service.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x4f\x1b\x49\x10\xbd\xfb\x57\xd4\x7a\x91\xd8\x5d\xa9\x67\x6c\xd0\x1e\x68\x29\x91\x90\x88\x92\x03\x24\x16\x0a\x5c\x51\xb9\x5d\x33\xd3\xa1\xbf\x52\xdd\x33\xe0\x60\xfe\x7b\x34\x18\x7b\xda\x60\x2e\x48\xe9\x53\xbb\xde\xab\xaa\xe7\x37\xaf\x31\xe8\x6b\xe2\xa8\xbd\x93\x40\xf7\x89\x5c\x7f\x8d\x65\x37\x9d\x53\xc2\xe9\xe8\x56\xbb\x85\x84\x33\x0a\xc6\x2f\x2d\xb9\x34\xb2\x94\x70\x81\x09\xe5\x08\xc0\xa1\x25\x09\x81\xbd\x1d\xc5\x40\xaa\x2f\x31\x05\xa3\x15\x46\x09\xd3\x11\x40\x22\x1b\x0c\x26\xea\x11\x80\xbc\xb5\x3f\x59\xfb\xba\x60\x70\x4e\x26\x6e\x60\x00\x0c\x21\xc3\x37\x2b\xfa\xa3\xbc\x4b\xa8\x1d\xf1\x96\x2d\x9e\xc7\x29\x2d\x2a\x4a\xaa\x21\xde\x8e\xd1\x16\x6b\x92\xc0\x54\xeb\x98\x78\x59\x54\xb4\xf0\x8c\x81\xfd\x0f\x52\xa9\xf0\x5c\x97\xeb\x8a\x3c\x9e\x6c\x7b\x94\xb7\x16\xdd\x62\xd0\x22\xa0\x9c\x6b\x57\xce\x31\x36\x59\x4d\xa8\xec\xc7\x6a\x7b\x07\xf8\xfb\xaf\xd7\x74\x80\x48\x09\x04\xdd\xb7\x1e\x82\x0e\x54\xa1\x36\x19\xf8\x90\xdd\x01\x48\x35\x1e\xc6\xb5\xf1\x73\x34\x72\xbc\x07\x02\xa0\x0e\x4d\x8b\x49\x7b\x77\xa3\x5d\x22\xee\xd0\x48\x38\x9e\xc4\xfd\xec\xa8\x18\x03\xbd\xcd\x7c\x84\x8f\x4f\x5e\x53\x6a\xa8\x8d\xc5\xd2\xe6\xda\x54\xcb\x06\x44\x3c\x87\x83\x87\xd9\xe5\xb7\x8b\xef\xa7\x97\x8f\xb0\x82\x84\x0c\xf7\xdd\x2f\x10\xc2\x79\xe1\x3b\xe2\x3b\xd6\x89\xc4\x42\x33\xac\x56\x90\xb8\xa5\x6c\xc4\xad\x36\x06\xc4\x97\xab\x19\x1c\xfc\x53\xd5\x4c\x01\xc6\xc3\xba\x31\x94\x81\xbd\x2a\xff\x2b\x7b\xe3\x41\x18\x58\x81\x6a\x13\x88\x05\x1c\x96\x87\x20\x2a\x38\xfe\x37\xf7\xd1\x10\x05\xd0\xae\xd2\x4e\xa7\xe5\x16\x20\xd7\xc9\x8c\xb5\x89\xc4\xb3\xe2\x1d\x57\x7a\xeb\x48\xc2\xf8\x19\xbb\xb9\x3e\x3d\xbf\xfa\x34\xd8\x71\xe7\xf9\x56\xbb\xfa\x4c\xb3\x84\xb2\xcf\x6c\xb9\x85\x3a\x6f\x5a\x4b\x17\xbe\x75\x29\xe6\xf1\x18\xd2\xbc\xfe\x4b\x22\x26\xcf\x58\x93\x58\x37\x64\xdb\x6d\xdf\x3b\xc3\xd4\xbc\x98\xfd\x7a\xc6\xcb\x08\xf7\x48\x39\xc0\xb2\x3b\x2a\xa6\x47\xc5\x90\x5a\xe4\x3a\xee\x3a\x20\x36\x32\x8a\x14\x17\xf3\x22\x60\x6a\x3e\x94\x7b\x16\xac\xb9\xca\xbb\x4a\xd7\x45\xa5\x0d\xe5\xac\xf2\x8d\x5c\x04\xcf\xfb\x3c\xb8\xa3\x79\xab\xf3\xf0\x6c\x1e\xeb\xcc\x73\x92\x70\x32\x39\x19\x14\x33\x45\xdf\xb2\xa2\x1d\xd9\x4c\x3f\x5b\x8a\x69\xa7\x06\xa0\x42\x2b\xe1\xff\xc9\xc4\xee\x54\x2d\x59\xcf\x4b\x09\x47\x9f\xf3\x95\x46\x5b\xfd\xfe\xfe\x3f\xf7\x89\x63\x83\x4c\x33\xf6\x8a\x62\xfc\x8a\x96\x62\x40\x45\x32\x7f\x2a\xeb\x51\xef\x5c\x4b\x36\xa4\xe5\x53\x68\x1f\x1e\x47\xbf\x03\x00\x00\xff\xff\x87\x1f\xe3\xfe\xda\x05\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1498, mode: os.FileMode(420), modTime: time.Unix(1570195611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesRouteYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x4e\x03\x31\x0c\x44\xef\xf9\x0a\x7f\x41\xd9\x1e\x9b\x3b\x57\x54\x15\xc4\xdd\x4a\x86\xd4\x62\x13\x47\x8e\xdb\x8a\xbf\x47\xd9\x05\xc1\x25\xd2\xbc\x37\x19\xf9\x53\x5a\x8e\x74\xd1\x9b\x23\x70\x97\x77\xd8\x10\x6d\x91\x6c\x92\x83\x76\xb4\x71\x95\x0f\x3f\x88\x3e\xdd\x8f\xa1\xc2\x39\xb3\x73\x0c\x44\x8d\x2b\x22\x75\xd3\x1a\x46\x47\x9a\xc8\x75\xbe\x44\xfb\xe8\x2b\xec\x2e\x09\x1b\xf9\x57\x9e\xf1\x01\x29\x57\x8f\x74\x5c\x96\x40\xd4\xd5\x7c\xff\xe8\x6c\x05\x7e\x9e\x99\x4e\xcb\x69\x4a\x5f\xc7\x8f\x83\x55\x69\xec\xdb\x79\xc8\x65\x1f\x96\x36\x90\x6e\x86\xe7\x5c\xf0\xf6\xd7\x38\xeb\x2a\xe9\x2b\xd2\x05\x59\x0c\xc9\x03\xd1\x43\xd6\x9c\xd8\xf2\xaf\x7a\xd1\x86\xf0\x1d\x00\x00\xff\xff\x84\xf0\x9a\x83\xff\x00\x00\x00")

func promTemplatesRouteYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesRouteYaml,
		"prom-templates/route.yaml",
	)
}

func promTemplatesRouteYaml() (*asset, error) {
	bytes, err := promTemplatesRouteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/route.yaml", size: 255, mode: os.FileMode(420), modTime: time.Unix(1570192158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570192162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml": promTemplatesDeploymentYaml,
	"prom-templates/route.yaml": promTemplatesRouteYaml,
	"prom-templates/service.yaml": promTemplatesServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml": &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"route.yaml": &bintree{promTemplatesRouteYaml, map[string]*bintree{}},
		"service.yaml": &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

