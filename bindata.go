// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// prom-templates/deployment.yaml
// prom-templates/kustomization.yaml
// prom-templates/service.yaml
// html/app.jsx
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _promTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xbd\x72\xdb\x4c\x0c\xec\xf5\x14\x28\xbe\x96\x12\x65\xcf\x57\xf8\xba\x4c\x3c\x49\x8a\x28\xd1\x38\x9a\xf4\xd0\x11\x12\x2f\xe6\xfd\x04\xc0\xc9\x56\x6c\xbf\x7b\x86\x96\x45\x1e\x13\xa7\x49\x11\x56\xe4\x2e\x76\x01\xec\x1d\x31\xb9\xaf\xc4\xe2\x62\x30\x40\xf7\x4a\xa1\x7f\x95\xc5\x61\xb9\x25\xc5\xe5\xec\xd6\x85\xc6\xc0\x35\xa5\x2e\x1e\x3d\x05\x9d\x79\x52\x6c\x50\xd1\xcc\x00\x02\x7a\x32\x90\x38\xfa\x99\x24\xb2\x3d\xc4\x94\x3a\x67\x51\x0c\x2c\x67\x00\x4a\x3e\x75\xa8\xd4\x33\x00\xa5\xb4\x7f\x0a\xf9\x09\xe8\x70\x4b\x9d\x9c\x69\x00\x4c\xa9\xe0\xcf\x2d\xfa\xc7\x05\xa7\x6f\x63\x50\x74\x81\x78\x50\x54\x2f\x96\xd6\x55\x3b\x52\xdb\x12\x0f\x56\xce\xe3\x9e\x0c\x30\xed\x9d\x28\x1f\xe7\x3b\x6a\x22\x63\xe2\xf8\x8d\xac\xce\x23\xef\x17\x27\xc4\x5c\xd6\x83\xc6\x46\xef\x31\x34\xe3\x3c\x15\x2c\xb6\x2e\x2c\xb6\x28\x6d\x81\x55\xb6\xf8\x78\x1c\xde\x01\x84\x14\xaa\x7c\x1f\x21\xb9\x44\x3b\x74\x5d\xc1\x65\x8f\x72\x0b\x75\x5d\xd7\x05\x68\x33\x77\x50\xc9\x47\xf8\xef\x61\x7d\xf3\x79\xb5\x79\x73\xf3\x04\x8f\xa0\xc8\x70\x7f\xf8\x01\x95\x1f\x4a\xef\x22\xdf\xba\xb0\xbf\x76\x6c\x60\xd1\x07\x44\xda\x52\x96\xc5\x50\x40\xe1\xf0\x8e\xa3\x37\x85\x79\x05\x36\x86\x9d\xdb\xaf\x30\xdd\xd0\xae\x64\xa6\x67\xa1\x38\xa6\x76\x88\x5d\xf6\xb4\x8a\x39\xa8\x94\x31\x8c\xd5\xa7\xc6\x95\x68\x64\xdc\x53\x75\x12\x14\xde\xbe\xd7\xae\x51\xdb\x57\x07\xb5\x7f\x3c\xc2\xb1\xf6\xd7\x23\xec\x99\xc2\xca\x1c\x2e\xe6\xcb\x8b\xf9\x18\x63\x8a\xfc\xda\xb0\x77\xb4\xcd\xae\xcc\xfa\xdc\x7a\x1d\x59\x0d\x5c\xd5\x57\xa3\x05\x13\x36\x2e\x90\xc8\x9a\xe3\x96\xca\xa8\x5a\xd5\xf4\x9e\x74\x9a\x5e\x3a\xad\x37\xc5\x7e\x77\x7d\xbe\x12\xb6\xa5\x7e\x9a\x0f\x9b\xcd\xba\x20\xd4\x79\x8a\x59\xbf\x90\x8d\xa1\x79\xf9\x77\x06\x27\x62\x17\x9b\x91\x2a\x0d\x25\x5b\x4b\x22\x9b\x96\x49\xda\xd8\x35\x53\x65\x7f\xe5\x32\x53\xc1\x5e\x16\x2b\x4a\xcc\x6c\x49\xca\x55\x98\xbe\x67\x12\x95\xe9\x7a\x36\xe5\xbe\x6d\xed\x27\xa8\x27\x1f\xf9\x68\xe0\xff\xba\x5e\xb9\x7f\x76\x61\xa4\x45\xa6\x35\xc7\x7e\xeb\x4f\xe8\x49\x12\x5a\x32\xa0\x9c\xcf\x1e\x27\xc3\xbf\x6c\x4e\x3e\xe9\xf1\xf9\xaf\x7a\x78\x9a\xfd\x0c\x00\x00\xff\xff\x09\x8e\x35\x7c\x1a\x05\x00\x00")

func promTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesDeploymentYaml,
		"prom-templates/deployment.yaml",
	)
}

func promTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := promTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/deployment.yaml", size: 1306, mode: os.FileMode(420), modTime: time.Unix(1570209403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x41\xca\xc2\x30\x10\x46\xf7\x39\xc5\x5c\xa0\xff\x01\x02\xff\xa2\x4a\x71\x93\xd8\x52\xd4\x6d\x19\xe3\x54\x02\x49\x26\x4c\xa2\xd8\xdb\x8b\xb5\x1b\x57\x1f\xbc\x8f\xf7\x1c\xc7\xc8\xc9\xe0\x95\x42\xd1\x0a\x00\x73\xd6\xb0\xef\xad\xed\x8f\x93\x69\x77\x9d\x51\x09\x23\x0d\x42\xb3\x7f\xfd\x1e\x8d\x12\x2a\xfc\x10\x47\xab\xd8\xc0\x8d\x72\xe0\x25\x52\xaa\x7f\x0b\xc6\xb0\xb2\x42\xf2\xf4\x8e\xbe\xc0\x71\x9a\xfd\xdd\x62\x3e\x50\x22\xc1\xca\xa2\x55\x03\x9f\xbe\x86\x2c\x1c\x2b\x8a\x02\x08\xbe\x92\x60\xd8\xa2\xc3\xd8\xdb\x53\x3b\xfe\x6f\x3b\x5d\x5a\x73\xee\xd4\x3b\x00\x00\xff\xff\x25\xde\x37\x9b\xb6\x00\x00\x00")

func promTemplatesKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesKustomizationYaml,
		"prom-templates/kustomization.yaml",
	)
}

func promTemplatesKustomizationYaml() (*asset, error) {
	bytes, err := promTemplatesKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/kustomization.yaml", size: 182, mode: os.FileMode(420), modTime: time.Unix(1570201268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xae\xc2\x30\x0c\xc6\xf1\x3d\xa7\xf8\x2e\xf0\xa4\xbe\xb1\x5e\xb9\x00\x12\x88\xdd\x4d\x3d\x44\x24\xb1\x95\x98\x72\x7d\x94\x92\x89\xd1\x3f\x7f\xfa\xb3\xa5\x87\xb4\x9e\xb4\x12\x8e\xff\xf0\x4c\x75\x27\xdc\xa4\x1d\x29\x4a\x28\xe2\xbc\xb3\x33\x05\xa0\x72\x11\x82\x35\x2d\x01\xc8\xbc\x49\xee\x83\x01\x36\x9b\xde\x4d\xe2\x30\xd3\xe6\xf3\xf9\x77\x1e\x84\x75\x59\x97\x13\x30\xa6\xae\x51\x33\xe1\x7e\xb9\x4e\xfb\xc6\xdf\xb2\xbd\x52\x00\xba\x64\x89\xae\xed\xb7\xff\x09\x00\x00\xff\xff\x6d\xe1\xdb\x34\xac\x00\x00\x00")

func promTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_promTemplatesServiceYaml,
		"prom-templates/service.yaml",
	)
}

func promTemplatesServiceYaml() (*asset, error) {
	bytes, err := promTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prom-templates/service.yaml", size: 172, mode: os.FileMode(420), modTime: time.Unix(1570192162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlAppJsx = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\x15\x0a\x48\xc6\xe6\xe4\x6c\x0f\x7d\xb1\xad\x3c\xc4\xdb\x3d\xa4\x68\xee\x0e\x9b\x16\x7d\x28\x16\x5d\x86\x1a\xdb\x44\x28\x52\x20\x29\x7b\x53\xc3\xff\x7b\xc1\x0f\x49\x94\x2c\x27\x5b\xa0\x79\x31\xc4\xf9\xe0\xcc\xfc\xe6\x8b\xa1\x9c\x68\x0d\x4f\x48\x14\xdd\xdf\x13\x05\xf8\xdd\xa0\x28\x35\x7c\x41\x42\x4d\xbe\x91\x55\x2d\x05\x0a\x03\xa7\x19\x00\x95\x42\x1b\xd5\x50\x23\x55\x56\x2b\x59\xeb\xb9\x3b\x06\xd0\x4d\x8d\xed\xd1\x6a\xe6\x8e\xcc\x9e\xe9\x7c\x4f\x44\xc9\xf1\x41\xd4\x8d\xd9\xec\x89\xd8\x21\x14\x57\x08\xf9\x33\x13\x65\x66\x69\xf3\xd5\x58\xfe\xa9\x79\xae\x98\x19\x8a\xfa\xb3\x91\xd4\xd9\x5e\x7d\xa1\x3a\xc3\x03\x0a\xd3\x9a\xea\x74\x38\x4b\x73\x29\xbc\xdb\x8e\xd7\x73\xe5\x86\xa8\x1d\x9a\xfc\x40\x78\x83\x63\x9d\xfe\xce\x77\xd5\x0d\xd8\x3a\x15\x0a\x45\x89\x2a\x6b\xe5\x14\x9a\x46\x09\xc8\xdc\x07\xc0\xda\x85\xfb\x5e\x4a\xa3\x8d\x22\x75\xfe\x59\xaa\x0a\xf6\x52\xb1\xff\x48\x61\x08\xbf\x0b\x6c\xd3\x8c\xbf\x28\xd9\xd4\x3d\xcb\x25\xd3\x46\x72\xd0\x55\x71\xfa\xf8\xf1\x1c\xb3\x4d\x6b\xdb\x48\x61\x94\xe4\x03\x3e\x00\xd2\x18\xf9\x59\xd2\x46\x17\x89\x51\x0d\x26\x23\xb2\x79\xad\xb1\x48\x0c\x7e\x37\x63\x4a\xcd\x09\xc5\xbd\xe4\x25\xaa\x22\xf9\x8c\x58\x42\x85\xf0\xbb\x92\x47\xf8\xc7\x97\xbf\xe9\x3c\xcf\xc7\x02\x2e\xf4\xc5\x29\x0a\xac\xee\x51\x3a\x8f\x98\xa5\xf0\x18\x07\xfe\x0b\xec\x87\xfc\x8b\x41\x90\x16\x97\x51\xfa\xa1\x20\xbe\x13\xc3\xfb\xc6\x18\x29\x26\xe3\xa3\x5d\x66\x8c\x1d\x96\x62\xc3\x19\x7d\x19\xb8\xe0\x73\x68\x74\x13\xc0\x2f\x28\x50\x11\x83\x43\x03\xc6\x8e\x78\x0b\x7e\xdc\xd7\x0b\xea\x45\x52\x4d\x72\x78\x62\xc8\xf0\xf3\x6c\xe6\x3b\xc9\x23\x6a\x4d\x76\xf8\x66\x1f\x19\xd5\xc2\x81\x28\x20\x1c\x95\xd9\x38\x0d\x05\xa4\xa9\xef\x01\xfa\xc8\x0c\xdd\x43\x16\xe5\x02\xa1\x86\x49\xd1\x4a\x02\x50\xa2\x11\x52\x6d\x88\x69\x74\xba\xec\x5c\x1a\xaa\x73\x5f\x3f\x31\xb1\x95\x69\xc7\xf1\xac\x90\xbc\xac\x06\x5a\x4a\x29\xf0\x1d\x1d\xba\xa1\x14\xb5\x7e\x53\xcd\x96\x30\xde\xa8\xf7\x34\x95\x36\x3d\xd5\xa4\x22\x9f\xb4\x03\xa1\xc4\x7d\x41\x02\x1f\xa2\xf3\xd5\x64\x27\x29\xd9\x01\x1c\x14\xbf\x92\x0a\x8b\x53\xcf\x7e\x06\x25\x39\x16\x5e\x55\xd2\xc3\x1f\x97\x5a\xe5\xd1\x3b\x77\xb8\x97\xec\x10\x70\x1e\xc2\xfc\xe4\x22\xfe\xbf\xa0\xcc\xb6\x03\x20\xc3\x4d\x3a\xe7\x28\x76\x66\x0f\x45\x01\xb7\x3d\xac\x23\xa7\x00\xd6\xba\x26\xe2\x6e\xbd\x70\x3f\xe1\x34\x4c\x8a\x33\x20\xd7\x38\x12\x8d\x24\x3b\x17\x82\xbb\x83\xe2\x99\xb2\xa8\x22\x75\xc6\x0c\x56\x50\x8c\xeb\x6f\xdd\x66\xb7\x4f\xc3\xe2\x64\xd9\x42\x4e\x9e\x21\x28\x08\xa7\x6d\x28\x87\x5d\xc7\x07\xb2\xfd\x3b\x47\x35\x18\x99\x39\xef\xf3\x20\x0e\xb9\x6b\x83\x6e\x32\xfc\x1f\x86\x74\xe7\xbc\xad\x1d\x3b\x97\xdb\xb8\x44\xdd\x76\x09\x69\x7a\x13\x8e\xdb\xe8\x2c\xe1\x5f\x5f\xdb\xb3\xa3\x5e\x82\x68\xb8\x9f\x15\xe7\xcb\xc1\x1f\x8d\xd7\xd1\xf4\xee\x09\x6f\x0e\xfe\x68\x9e\x4e\x29\x98\x5c\x02\x82\x06\x52\x96\x2d\x58\xc5\xf8\xe4\xfa\xda\x10\x2f\x04\x51\x20\x06\xd3\x5e\xa3\xb1\xd9\x8f\xd9\x69\x10\xaa\x78\x4a\x4d\xab\x9d\xda\x1f\xfc\xd6\x51\x2b\xf7\xfb\x09\xb7\xa4\xe1\x26\x0b\x7e\x74\x15\xe3\x20\x8a\xc7\xe0\x5b\x45\xd3\xe6\x8e\x37\x58\xbd\x76\xe4\x48\xd5\xd1\x7a\x21\xca\xec\xaf\x4f\xbf\xfd\x9a\x6b\xa3\x98\xd8\xb1\xed\x6b\xd6\x97\x46\xea\x73\x3a\x5d\x42\x2a\xf0\xd8\x25\x01\x40\x1a\xf2\x20\x5d\xc2\xb4\x69\x81\xf3\x3c\x9f\x87\xe2\xa4\xc4\xf5\x70\x54\x4a\xaa\xa8\x6f\x4b\xa1\x25\xc7\x9c\xcb\x5d\x20\x45\x29\x3f\x03\xe8\xc1\xca\xc2\x8d\xd3\x18\x84\xec\xbd\x83\xec\x14\xa7\x68\x9e\x07\xcb\xda\xb3\x9b\x96\xfa\x35\x98\xe6\x6e\xa1\x6d\xe5\x7c\x62\xe5\xa3\x6c\x84\x19\xcc\x24\x2e\x29\x14\x70\x64\xa2\x94\xc7\x9c\x4b\x4a\x6c\x48\x6e\x40\xe0\xf1\xdf\x8d\x62\xab\x8e\xef\xa8\xfb\x6f\x8b\x19\x97\xd4\xb6\x14\x23\xa9\xe4\x50\x14\x05\x24\x7b\x63\x6a\xbd\x4c\xe6\x51\xf3\xf1\x42\xb6\xb5\x1f\xb5\x5e\x26\x93\xad\x6c\xc8\xd5\x31\xcd\x22\xca\x87\x02\x92\xc5\xc2\xce\x05\x7b\xeb\x5e\x6a\xb3\xba\x20\x1f\xf5\xc2\x0f\xc8\x24\xb6\x19\x0a\xeb\x09\xfc\x13\x9f\x9f\x24\x7d\x41\x93\x79\x91\x90\x7b\x1c\x0d\x98\x3d\x69\xcb\xae\x17\xa4\x52\x08\xa4\xe6\x41\x18\x54\x07\xc2\x43\xd1\x2f\x16\x70\xc4\x67\xed\x14\x81\x14\xb2\x46\xe1\x53\x1b\x38\xd3\xc6\x6e\x2d\xc1\xaa\x3c\x10\x0b\xc8\xe6\x16\xb6\xa9\x7c\x48\x7a\x55\xe1\x36\x2c\x93\xf6\x5d\x71\x51\x84\xae\x0b\x1d\x35\x9c\x63\x0e\x62\x72\xc3\x2a\x94\xae\xf1\xfc\xe9\xcf\xb7\x2b\x6b\xa1\x42\x6d\xbd\x62\x15\x2a\x30\xd2\x1e\x83\x14\xe0\xcc\x91\x5b\xb8\xb8\x94\x75\x5b\x1c\xe5\x48\xd4\xdf\xbd\xbe\x6c\x14\x80\xb9\x53\xed\x38\xa0\x3d\x73\x6a\x7f\x40\xf3\x79\x3a\x7a\x94\x4b\x8d\x57\xc3\xe7\xa9\x05\xe0\xb5\xf0\x75\xc9\xf3\xcd\x03\x0b\x4c\x83\x13\x2a\x73\xf8\x82\xc1\x04\x38\x32\xce\xe1\x19\x81\x18\x83\x55\x6d\xb0\x04\x26\xe0\x8f\xa7\x47\x62\xf6\x79\xc5\xa2\xf9\x69\xff\x3e\xde\xde\xde\xde\xc2\xc2\xfd\xde\x0c\x28\xd9\x20\xd6\x1f\x06\xa1\x9f\x07\x89\x4e\x60\x7e\x06\x6d\x0d\x28\xf3\x6f\xbd\x16\xcc\x15\x12\xdd\xc5\xfa\x2a\x8a\x6f\x5c\x64\x21\x60\x82\x2a\xac\x6c\xc8\x14\xda\xae\xc7\x02\x16\x7d\x80\x62\xd4\xa0\x00\x8d\xa6\x85\xd4\x65\x14\xdd\x23\x7d\xb9\x81\x2e\x00\xce\xe7\x9b\xa1\x43\x0e\x6c\x4a\x38\x07\xc7\x0d\xdb\x46\x38\x34\x81\x6c\x8d\x4d\x2a\xcf\xf6\x16\xb6\xae\xd7\x5d\xc5\xd6\x53\x0b\x40\xa5\xa6\xd0\x75\xe4\x1e\x99\x24\xe0\x8b\x82\xda\xde\x85\x0a\x4b\x70\x2c\x4b\x48\xa2\xf8\x2a\xd5\x76\xc1\xfe\x30\xd9\x70\xa9\x99\xd8\x81\x37\x2c\xb9\x08\xfe\x51\xe7\x2e\x67\xda\x59\xd4\xba\xe3\xcc\xac\xba\xc1\x8a\x07\x73\x2d\x0d\xf1\x60\xf2\x92\x18\x32\x5f\x45\x44\x03\xbd\xac\x1b\x3e\x35\x51\x1a\x2f\x79\x47\x03\xbb\x9b\x01\xc3\x21\x31\xda\x30\x6d\xcf\x6a\xfb\x7d\xdf\xc5\xfc\x6c\x8a\x16\x66\xb6\x8d\xa7\x6a\x2b\x00\x7f\x28\xdc\x2e\x13\xf7\xe8\x8e\x56\xc0\x3a\x2c\xbc\xed\x51\x78\xad\x0d\x75\x0c\x76\xbd\xe8\x5e\x28\xa2\x35\x69\xdc\xe2\xa3\x4b\x3a\xa6\x4b\xf9\xd4\x7f\xfe\x44\xd1\x02\x9d\x46\x83\xe0\x9d\xfd\x3f\x52\x13\x3d\x27\xd7\xfb\x9f\xef\x7e\x57\xb2\xc2\xcd\x03\x36\x7a\xbd\xd8\xff\x1c\xd1\xba\x7f\x06\x45\x95\x1e\x4d\xf8\x81\xeb\x57\xde\xe6\x83\x7f\xad\x0c\x5f\xb6\x6f\x0b\xf8\x1d\x69\x42\x22\xbc\x88\x3b\x91\x28\xd2\xeb\x67\x15\x7f\x9e\x3a\x38\x26\x5e\x31\xdd\x6b\xd5\xad\xce\x9f\x7e\x7b\xcc\x43\x12\xcd\x3a\xc7\xdd\x86\xbd\xb8\xb3\xc5\x52\x4a\xda\xd8\x9e\x92\xef\xd0\xfc\x85\xbb\xf6\x72\xff\xfa\x50\x66\x29\x95\xc2\x10\x26\x50\xa5\xf3\xd9\x7c\x35\xfb\x6f\x00\x00\x00\xff\xff\x26\xf3\x74\xf6\x45\x13\x00\x00")

func htmlAppJsxBytes() ([]byte, error) {
	return bindataRead(
		_htmlAppJsx,
		"html/app.jsx",
	)
}

func htmlAppJsx() (*asset, error) {
	bytes, err := htmlAppJsxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/app.jsx", size: 4933, mode: os.FileMode(420), modTime: time.Unix(1570265764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x3f\x6f\xdb\x3e\x10\xdd\xf3\x29\xf8\x23\x10\xe0\xd7\x41\xa4\x1a\xc7\xad\xa1\x50\x5e\xd2\x0e\x9d\x9a\xa1\x4b\x46\x8a\x3c\x95\x54\x29\x51\xe0\x9d\x1d\x19\x45\xbf\x7b\x61\x53\xb6\x6b\xb7\xa3\x27\xf1\xde\x01\xef\x0f\xf4\x4e\xfd\xf7\xe9\xeb\xf3\xb7\xd7\x97\xcf\xcc\x51\x1f\xd6\x77\x2a\x7f\x18\x53\x0e\xb4\xdd\x3f\x18\x53\x3d\x90\x66\xc6\xe9\x84\x40\x35\xdf\x50\x5b\xac\xf8\xfa\x2e\xef\xc8\x53\x80\xf5\x4b\x8a\x3d\x3c\x7f\x81\x0d\x2a\x99\x91\x79\x8d\x26\xf9\x91\x18\x26\x53\x73\x47\x34\x62\x25\xa5\xb1\x43\x87\xc2\x84\xb8\xb1\x6d\xd0\x09\x84\x89\xbd\xd4\x9d\x9e\x64\xf0\x0d\xca\x04\xda\x90\x7c\xbf\x14\x8f\xe2\x21\x0f\xa2\xf7\x83\xe8\x90\xaf\x95\xcc\x7c\xeb\x1b\x92\x17\x36\xf6\x37\x14\x68\x74\x03\xa1\x30\x31\x81\x5c\x8a\x95\x78\x78\x94\x4d\x8a\x6f\x08\xe9\xd6\x21\x8a\x26\x46\x42\x4a\x7a\x94\xa5\x58\x94\x62\x75\x0d\xff\x43\x30\x2b\x06\x3f\xfc\x60\x09\x42\xcd\x91\x76\x01\xd0\x01\x10\x67\x2e\x41\x7b\x76\xd0\xeb\xc9\xd8\x41\x9c\xc8\xf6\xc3\xde\xc4\x59\x74\x21\x16\xe2\xa3\x34\x88\xf2\x52\xd1\x20\x9e\xca\x71\xe0\xcf\x39\x19\x13\x46\x27\xcb\x7e\xce\x13\x63\x6f\xde\x92\xab\xd8\xb2\xbc\x7f\x3a\x61\xb1\xe9\xc0\x50\xd1\x7a\xaa\x98\x89\x03\x69\x3f\x9c\x97\x0e\xfc\x77\x47\x15\x5b\x94\xe5\x38\x1d\xe1\x5f\x47\x76\x04\x9d\x8c\x2b\x0c\x0c\x04\xe9\x0f\x99\x31\xa2\x27\x1f\x87\x6a\x1f\x59\x93\xdf\xc2\x99\x91\xe2\x78\x65\x80\x92\x1e\xb0\x8d\xa9\xaf\xf2\x33\x68\x82\xd7\xff\x8b\x65\x79\xff\xee\xe9\xda\xf9\x87\xbf\x7d\x28\x79\x8a\xac\xe4\xf1\x82\x54\x13\xed\x6e\xfe\xdb\xd6\x6f\x99\xb7\x35\x9f\xc3\x41\xe2\xcc\x04\x8d\x78\x81\x1c\x38\x6a\x7e\xcc\xbb\x3c\xe8\xf0\x99\x41\x5a\xbf\xbd\xac\x0e\xed\x46\xa8\x39\xc1\x44\xb9\x7d\x3c\x97\x49\x8f\xa3\xe8\x70\xba\x2c\x9c\x92\xd9\x8c\x92\xf9\xd0\x7f\x07\x00\x00\xff\xff\x00\x64\xcf\xe1\x00\x04\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 1024, mode: os.FileMode(420), modTime: time.Unix(1570265764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prom-templates/deployment.yaml":    promTemplatesDeploymentYaml,
	"prom-templates/kustomization.yaml": promTemplatesKustomizationYaml,
	"prom-templates/service.yaml":       promTemplatesServiceYaml,
	"html/app.jsx":                      htmlAppJsx,
	"html/index.html":                   htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"app.jsx":    &bintree{htmlAppJsx, map[string]*bintree{}},
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
	"prom-templates": &bintree{nil, map[string]*bintree{
		"deployment.yaml":    &bintree{promTemplatesDeploymentYaml, map[string]*bintree{}},
		"kustomization.yaml": &bintree{promTemplatesKustomizationYaml, map[string]*bintree{}},
		"service.yaml":       &bintree{promTemplatesServiceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
